I am going to refactor my search script so that it is object oriented (so that it will be easier to extend), and then attempt to make it more efficient by converting it to cython code. I will also be taking a test-first approach and will employ automated testing with the pytest module. The standard library package for unit testing, unittest, seems inferior. I will use the included profiler, cProfile, for profiling the code. Finally, I will be trying out debuggers, ipdb and pudb.

Problem statement:

I need to search my .bib reference files for keywords in various fields. The previous solution was too slow and limited to searching predefined keywords. I would also like to be able to use simple logic in the creation of search terms.

Requirements:

The program should have a very simple and efficient user interface, as I use it often and need it to be quick. Because I use it often, it can rely on more commands that require me to remember them rather than have prompts with instructions or a GUI. So the input should be the bib files, which are stored in one directory, and a single set of command line arguments. The arguments should include which field to search, which terms to search in that field, and logical operators that allow these basic search terms to be combined. There will also need to be arguments that allow combinations of fields for each entry matching the search field to be displayed. The output will just be prints to the terminal of these matching fields.

Analysis:

What are the main objects here? I will need to have a custom parser for the command line arguments, as well as a parser for the bib files. I will probably be best off using regex, although that might make it difficult to improve on the code with cython.
